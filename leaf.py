# -*- coding: utf-8 -*-
"""leaf-disease-detection-streamlit (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1exXwZTjChzBQjjie2SFwhBlpzFXm2gQO
"""

import streamlit as st
import numpy as np
import tensorflow as tf

# Replace with your actual categories
category_names = [
    "Category 1", "Category 2", "Category 3", "Category 4",
    "Category 5", "Category 6", "Category 7", "Category 8"
]

# Streamlit App
st.title("Leaf Disease Detection Using Deep Learning")

# Dropdown to select model
model_choice = st.selectbox("Choose Model", ["ResNet50", "EfficientNetV2", "CNN"])

# File uploader for image input
uploaded_file = st.file_uploader("Upload an Image", type=["jpg", "jpeg", "png"])

if uploaded_file:
    # Load and preprocess the image
    image = tf.keras.preprocessing.image.load_img(uploaded_file, target_size=(224, 224))
    st.image(image, caption="Uploaded Image", use_column_width=True)

    image_array = tf.keras.preprocessing.image.img_to_array(image) / 255.0
    image_array = np.expand_dims(image_array, axis=0)

    # Load the appropriate model
    if model_choice == "ResNet50":
        model = tf.keras.models.load_model("resnet_model.h5")
    elif model_choice == "EfficientNetV2":
        model = tf.keras.models.load_model("efficientnet_model.h5")
    else:
        model = tf.keras.models.load_model("cnn_model.h5")

    # Initialize the model output by calling it once with a dummy input
    dummy_input = np.zeros((1, 224, 224, 3))  # Adjust shape as per the model input
    _ = model(dummy_input)  # This ensures the model's outputs are defined

    # Validate the alignment of category_names and model outputs
    if len(category_names) != model.output.shape[-1]:
        st.error(f"Mismatch: category_names has {len(category_names)} entries, but the model predicts {model.output.shape[-1]} classes.")
    else:
        # Predict the class
        prediction = model.predict(image_array)
        predicted_index = np.argmax(prediction)
        predicted_class = category_names[predicted_index]
        st.write(f"Prediction: {predicted_class}")

